import { Request, Response } from 'express';
import cloudinary from '../config/cloudinary';
import fs from 'fs';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –≤ Cloudinary
export const uploadToCloudinary = async (req: Request, res: Response): Promise<void> => {
    try {
        if (!req.file) {
            res.status(400).json({ message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
            return;
        }

        const result = await cloudinary.uploader.upload(req.file.path, { folder: 'animal_shelter' });

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        fs.unlinkSync(req.file.path);

        res.json({ imageUrl: result.secure_url });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞', error });
    }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Cloudinary
export const uploadToCloudinaryFile = async (req: Request, res: Response): Promise<void> => {
    try {
        if (!req.file) {
            res.status(400).json({ message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
            return;
        }


        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
        const folderName ='animal_shelter/documents';

        // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞: image –∏–ª–∏ raw
        const result = await cloudinary.uploader.upload(req.file.path, {
            folder: folderName,
            resource_type: 'raw',
            type: 'upload' // üîë —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        });

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        fs.unlinkSync(req.file.path);

        res.json({
            fileUrl: result.secure_url.replace('/image/upload/', `/${result.resource_type}/upload/`),
            resourceType: result.resource_type
        });

    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞', error });
    }
};
